"""
Federated Learning Training Visualization Tool

This script visualizes the training history from federated learning experiments.
It creates multiple charts showing accuracy, loss, and client participation.

Usage:
    python visualize_training.py
    
Requirements:
    - matplotlib
    - training_history.json (generated by server.py)
"""

import json
import matplotlib.pyplot as plt
import os
from datetime import datetime

def load_training_history(filename='training_history.json'):
    """Load training history from JSON file"""
    if not os.path.exists(filename):
        print(f"Error: {filename} not found!")
        print("Run the server first to generate training history.")
        return None
    
    with open(filename, 'r') as f:
        return json.load(f)

def plot_accuracy_and_loss(history):
    """Plot accuracy and loss curves"""
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5))
    
    rounds = history['rounds']
    accuracies = history['accuracies']
    losses = history['losses']
    
    # Plot accuracy
    ax1.plot(rounds, accuracies, 'b-o', linewidth=2, markersize=8)
    ax1.set_xlabel('Round', fontsize=12)
    ax1.set_ylabel('Accuracy (%)', fontsize=12)
    ax1.set_title('Global Model Accuracy Over Rounds', fontsize=14, fontweight='bold')
    ax1.grid(True, alpha=0.3)
    ax1.set_ylim([0, 100])
    
    # Add value labels on points
    for i, (r, acc) in enumerate(zip(rounds, accuracies)):
        ax1.annotate(f'{acc:.1f}%', (r, acc), textcoords="offset points", 
                    xytext=(0,10), ha='center', fontsize=9)
    
    # Plot loss
    ax2.plot(rounds, losses, 'r-o', linewidth=2, markersize=8)
    ax2.set_xlabel('Round', fontsize=12)
    ax2.set_ylabel('Loss', fontsize=12)
    ax2.set_title('Global Model Loss Over Rounds', fontsize=14, fontweight='bold')
    ax2.grid(True, alpha=0.3)
    
    # Add value labels on points
    for i, (r, loss) in enumerate(zip(rounds, losses)):
        ax2.annotate(f'{loss:.3f}', (r, loss), textcoords="offset points", 
                    xytext=(0,10), ha='center', fontsize=9)
    
    plt.tight_layout()
    plt.savefig('training_curves.png', dpi=300, bbox_inches='tight')
    print("âœ“ Saved: training_curves.png")
    plt.show()

def plot_client_participation(history):
    """Plot number of clients per round"""
    fig, ax = plt.subplots(figsize=(10, 5))
    
    rounds = history['rounds']
    num_clients = history['num_clients']
    
    ax.bar(rounds, num_clients, color='green', alpha=0.7, edgecolor='black')
    ax.set_xlabel('Round', fontsize=12)
    ax.set_ylabel('Number of Clients', fontsize=12)
    ax.set_title('Client Participation Per Round', fontsize=14, fontweight='bold')
    ax.grid(True, alpha=0.3, axis='y')
    
    # Add value labels on bars
    for r, nc in zip(rounds, num_clients):
        ax.text(r, nc + 0.1, str(nc), ha='center', va='bottom', fontsize=10, fontweight='bold')
    
    plt.tight_layout()
    plt.savefig('client_participation.png', dpi=300, bbox_inches='tight')
    print("âœ“ Saved: client_participation.png")
    plt.show()

def plot_combined_metrics(history):
    """Create a comprehensive dashboard with all metrics"""
    fig = plt.figure(figsize=(16, 10))
    gs = fig.add_gridspec(3, 2, hspace=0.3, wspace=0.3)
    
    rounds = history['rounds']
    accuracies = history['accuracies']
    losses = history['losses']
    num_clients = history['num_clients']
    
    # 1. Accuracy over rounds (large plot)
    ax1 = fig.add_subplot(gs[0, :])
    ax1.plot(rounds, accuracies, 'b-o', linewidth=3, markersize=10, label='Accuracy')
    ax1.set_xlabel('Round', fontsize=12)
    ax1.set_ylabel('Accuracy (%)', fontsize=12)
    ax1.set_title('Global Model Accuracy Over Training Rounds', fontsize=16, fontweight='bold')
    ax1.grid(True, alpha=0.3)
    ax1.set_ylim([0, 100])
    ax1.legend(fontsize=11)
    
    # 2. Loss over rounds
    ax2 = fig.add_subplot(gs[1, 0])
    ax2.plot(rounds, losses, 'r-o', linewidth=2, markersize=8)
    ax2.set_xlabel('Round', fontsize=11)
    ax2.set_ylabel('Loss', fontsize=11)
    ax2.set_title('Training Loss', fontsize=13, fontweight='bold')
    ax2.grid(True, alpha=0.3)
    
    # 3. Client participation
    ax3 = fig.add_subplot(gs[1, 1])
    ax3.bar(rounds, num_clients, color='green', alpha=0.7, edgecolor='black')
    ax3.set_xlabel('Round', fontsize=11)
    ax3.set_ylabel('Clients', fontsize=11)
    ax3.set_title('Client Participation', fontsize=13, fontweight='bold')
    ax3.grid(True, alpha=0.3, axis='y')
    
    # 4. Accuracy improvement per round
    ax4 = fig.add_subplot(gs[2, 0])
    acc_diff = [0] + [accuracies[i] - accuracies[i-1] for i in range(1, len(accuracies))]
    colors = ['green' if x >= 0 else 'red' for x in acc_diff]
    ax4.bar(rounds, acc_diff, color=colors, alpha=0.7, edgecolor='black')
    ax4.set_xlabel('Round', fontsize=11)
    ax4.set_ylabel('Î” Accuracy (%)', fontsize=11)
    ax4.set_title('Accuracy Change Per Round', fontsize=13, fontweight='bold')
    ax4.axhline(y=0, color='black', linestyle='-', linewidth=0.5)
    ax4.grid(True, alpha=0.3, axis='y')
    
    # 5. Summary statistics
    ax5 = fig.add_subplot(gs[2, 1])
    ax5.axis('off')
    
    stats_text = f"""
    Training Summary
    {'='*40}
    
    Total Rounds: {len(rounds)}
    
    Initial Accuracy: {accuracies[0]:.2f}%
    Final Accuracy: {accuracies[-1]:.2f}%
    Best Accuracy: {max(accuracies):.2f}%
    
    Initial Loss: {losses[0]:.4f}
    Final Loss: {losses[-1]:.4f}
    Best Loss: {min(losses):.4f}
    
    Avg Clients/Round: {sum(num_clients)/len(num_clients):.1f}
    Total Client Updates: {sum(num_clients)}
    
    Improvement: {accuracies[-1] - accuracies[0]:.2f}%
    """
    
    ax5.text(0.1, 0.5, stats_text, fontsize=11, family='monospace',
             verticalalignment='center', bbox=dict(boxstyle='round', 
             facecolor='wheat', alpha=0.5))
    
    plt.suptitle('Federated Learning Training Dashboard', 
                 fontsize=18, fontweight='bold', y=0.995)
    
    plt.savefig('training_dashboard.png', dpi=300, bbox_inches='tight')
    print("âœ“ Saved: training_dashboard.png")
    plt.show()

def print_summary(history):
    """Print text summary of training"""
    print("\n" + "="*60)
    print("TRAINING SUMMARY")
    print("="*60)
    
    print(f"\nTraining Timestamp: {history.get('timestamp', 'N/A')}")
    print(f"Total Rounds: {len(history['rounds'])}")
    
    accuracies = history['accuracies']
    losses = history['losses']
    
    print(f"\nðŸ“Š Accuracy Metrics:")
    print(f"  Initial:  {accuracies[0]:.2f}%")
    print(f"  Final:    {accuracies[-1]:.2f}%")
    print(f"  Best:     {max(accuracies):.2f}%")
    print(f"  Improvement: +{accuracies[-1] - accuracies[0]:.2f}%")
    
    print(f"\nðŸ“‰ Loss Metrics:")
    print(f"  Initial:  {losses[0]:.4f}")
    print(f"  Final:    {losses[-1]:.4f}")
    print(f"  Best:     {min(losses):.4f}")
    print(f"  Reduction: -{losses[0] - losses[-1]:.4f}")
    
    print(f"\nðŸ‘¥ Client Participation:")
    print(f"  Average: {sum(history['num_clients'])/len(history['num_clients']):.1f}")
    print(f"  Total Updates: {sum(history['num_clients'])}")
    
    print("\n" + "="*60 + "\n")

def main():
    """Main function"""
    print("="*60)
    print("Federated Learning Training Visualization")
    print("="*60)
    
    # Load history
    history = load_training_history()
    if history is None:
        return
    
    print(f"\nâœ“ Loaded training history with {len(history['rounds'])} rounds\n")
    
    # Print summary
    print_summary(history)
    
    # Create visualizations
    print("Creating visualizations...")
    plot_combined_metrics(history)
    plot_accuracy_and_loss(history)
    plot_client_participation(history)
    
    print("\nâœ“ All visualizations created successfully!")
    print("\nGenerated files:")
    print("  - training_dashboard.png")
    print("  - training_curves.png")
    print("  - client_participation.png")

if __name__ == "__main__":
    main()
